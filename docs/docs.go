// Package docs GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/": {
            "get": {
                "description": "get the status of server.",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "HealthCheck"
                ],
                "summary": "Show the status of server.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/{table}": {
            "get": {
                "description": "Find all data by statement parameter",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CrudEngine"
                ],
                "summary": "Find all Data",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Table Name",
                        "name": "table",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "if isQuery is true, the sql query statement is fetched directly from the path table",
                        "name": "isQuery",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": " DISTINCT statement is used to return only distinct (different) values. ",
                        "name": "isDistinct",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "column name (ex : username, email)",
                        "name": "colls",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "limit per page",
                        "name": "pageSize",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page number list data ",
                        "name": "pageNo",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "sorting data by column name (ex : name ASC / name DESC)",
                        "name": "sortBy",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "description": "Insert data by column name in format JSON",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CrudEngine"
                ],
                "summary": "Insert Data",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Table Name",
                        "name": "table",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "JSON request body based on column name",
                        "name": "insertRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/{table}/{id}": {
            "put": {
                "description": "Update data by ID (primary key) and data by column name in format JSON",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CrudEngine"
                ],
                "summary": "Update Data",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Table Name",
                        "name": "table",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Primary Key",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "JSON request body based on column name",
                        "name": "updateRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete data by ID (primary key)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CrudEngine"
                ],
                "summary": "Delete Data",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Table Name",
                        "name": "table",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Primary Key",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:3000",
	BasePath:         "/",
	Schemes:          []string{"http"},
	Title:            "Echo Swagger Example API",
	Description:      "This is a sample server server.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
